{"version":3,"sources":["common/parseCustomDate.js","SearchPage/parseSearchLine.js","SearchPage/PatientProp.js","PatientPage/PatientObject.js","SearchPage/PatientsTable.js","SearchPage/patientsGET.js","common/SubmitButton.js","SearchPage/patientPOST.js","SearchPage/index.js","PatientPage/patientPUT.js","PatientPage/patientDELETE.js","PatientPage/PatPropInput.js","PatientPage/PatPropRadioset.js","PatientPage/toEditableDate.js","PatientPage/PatPropsForm.js","PatientPage/PatPropsFormShowButton.js","PatientPage/checkPatPropsForm.js","PatientPage/PatientPage.js","PatientPage/patientGET.js","PatientPage/index.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["parseCustomDate","str","dateElements","String","split","length","day","month","year","Date","getFullYear","UTC","toISOString","_unused","parseSearchLine","line","sexField","dateOfBirthField","textFields","filter","word","forEach","isSex","dOb","search","push","value","error","textFieldsJoined","j","quotesAreOpened","i","ioq","indexOf","toUpperCase","slice","toLowerCase","newState","familyName","firstName","fathersName","undefined","officialSex","dateOfBirth","allowNewPat","PatientProp","props","style","color","react_default","a","createElement","Fragment","label","Patient","patData","locale","_this","this","atTime","arguments","now","propName","updates","getTime","isNaN","parse","iTime","Infinity","histProp","key","update","getUpdateDate","dateDeJure","dateDeFacto","Object","keys","at","defineProperty","get","history","updateData","upd","date","pat","calcAge","momentTime","birth","moment","age","getMonth","getDate","toLocaleDateString","fullName","concat","sex","PatientsTable","patsRows","patsList","map","patient","_id","className","lastUpdate","Link","to","border","cellPadding","cellSpacing","id","width","colSpan","size","align","patientsGET","rawQuery","query","k","encodeURIComponent","join","fetch","then","response","ok","json","Error","data","list","catch","SubmitButton","_ref","allow","text","disabled","type","name","patientPOST","_x","_patientPOST","apply","_callee","state","body","reqHeaders","result","regenerator_default","wrap","_context","prev","next","Headers","Content-Type","method","JSON","stringify","headers","sent","abrupt","stop","SearchPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","errorMessage","reqTimer","redirect","handleSearchType","bind","assertThisInitialized","requestPatsList","handleFormSubmit","target","event","clearTimeout","setTimeout","setState","_this2","asyncToGenerator","mark","t0","message","finish","preventDefault","newPat","_context2","Redirect","bDateStr","onSubmit","onKeyUp","Component","patientPUT","_x2","_patientPUT","inForm","patId","patientDELETE","_patientDELETE","PatPropInput","_ref$value","_ref$size","handler","errors","backgroundColor","defaultValue","onChange","PatPropRadioset","listRadios","radio","defaultChecked","toEditableDate","dateStr","PatPropsForm","handlerChange","messages","handlerSumbit","handlerDelete","biologicalSex","address","phoneNumber","float","onClick","m","PatPropsFormShowButton","patPropsFormShow","diff","checkPatPropsForm","propsList","updateReason","updateDateDeJure","form","document","getElementsByName","formValues","checked","dateFields","fieldName","fieldValue","PatientPage","queriedId","match","params","formErrors","formDiff","formMessages","patUpdateAllow","handlePatPropsFormShowHide","handlePatPropsFormChange","handlePatUpdateSubmit","handlePatDelete","_checkPatPropsForm","reduce","showFormMessage","updPat","_context3","Math","round","random","newFormMess","messOff","fontSize","birthday","actualAge","PatientPageRouter","Switch","Route","exact","path","render","component","Menu","App","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80ee2a5b.chunk.js","sourcesContent":["/**\r\n * function parses date in following custom format:\r\n *  d(d).m(m).yy(yy)\r\n *  2-digit years from current + 1 ('20' for 2019) to '99' (1999) interprets as 19xx, less as 20xx\r\n *\r\n * returns false if string is not a date\r\n * returns Date ISO string if parsed successfully\r\n */\r\n\r\nexport default function parseCustomDate(str) {\r\n  let dateElements = String(str).split('.');\r\n  if (dateElements.length !== 3) {\r\n    return false;\r\n  }\r\n  // [0] - day, [1] - month, [2] - year\r\n  if (dateElements[0] === '' || dateElements[1] === '' || dateElements[2] === '') {\r\n    return false;\r\n  }\r\n  let day = +dateElements[0];\r\n  let month = +dateElements[1] - 1;\r\n  let year = +dateElements[2];\r\n  if (year < 100) {\r\n    // find the current year in 2-digit format\r\n    const currentYear = new Date().getFullYear() % 100;\r\n\r\n    if (year > currentYear) {\r\n      year = 1900 + year;\r\n    } else {\r\n      year = 2000 + year;\r\n    }\r\n  }\r\n  try {\r\n    return new Date(Date.UTC(year, month, day)).toISOString();\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n","import parseCustomDate from '../common/parseCustomDate';\r\n\r\n// first word (divided by whitespaces) in search line is the family name, second - first name,\r\n// third - father's name (if exist),\r\n// chars 'f' or 'm' (or russian 'ж' or 'м') marks officialSex,\r\n// and word that parses to date is the dateOfBirth\r\n\r\nconst parseSearchLine = line => {\r\n  let textFields = [];\r\n  let sexField, dateOfBirthField;\r\n\r\n  // split search line by whitespaces, filter double (or multi) whitespaces, and try to suggest what every element\r\n  // is it\r\n  String(line)\r\n    .split(' ')\r\n    .filter(word => word)\r\n    .forEach(word => {\r\n      // officialSex descriptor\r\n      // Humans' names can contains only one char. Thus, we must process it as a name only if it isn't sex descriptor\r\n      let isSex = false;\r\n      if (word.length === 1) {\r\n        if (word === 'f' || word === 'ж') {\r\n          sexField = 'female';\r\n          isSex = true;\r\n        } else if (word === 'm' || word === 'м') {\r\n          sexField = 'male';\r\n          isSex = true;\r\n        }\r\n      }\r\n\r\n      // date of birth\r\n      let dOb = parseCustomDate(word);\r\n      if (dOb) {\r\n        dateOfBirthField = dOb;\r\n        return;\r\n      }\r\n\r\n      // textFields\r\n      if (isSex) {\r\n        // skip processing as a text field if it is the sex descriptor\r\n        return;\r\n      }\r\n      if (word.search(/^[\"]{0,1}[a-zA-Zа-яА-ЯёЁ0-9 '-]{0,}[\"]{0,1}$/) === -1) {\r\n        textFields.push({ value: '', error: true });\r\n      } else {\r\n        textFields.push({ value: word, error: false });\r\n      }\r\n      return;\r\n    });\r\n\r\n  // words (now - textFields) wrapped into quotes (\") we join into one word\r\n  let textFieldsJoined = [];\r\n  let j = 0;\r\n  let quotesAreOpened = false;\r\n  for (let i = 0; i < textFields.length; i++) {\r\n    if (!textFieldsJoined[j]) {\r\n      textFieldsJoined[j] = { value: '', error: false };\r\n    }\r\n    let ioq = textFields[i].value.indexOf('\"');\r\n    // quotes opening\r\n    if (ioq === 0) {\r\n      textFieldsJoined[j].value = textFieldsJoined[j].value + ' ' + textFields[i].value.slice(1);\r\n      // if textFields[i].error === false, it doesn't change textFieldsJoined[j].error back to false\r\n      // if it already true\r\n      if (textFields[i].error) {\r\n        textFieldsJoined[j].error = true;\r\n      }\r\n      quotesAreOpened = true;\r\n      continue;\r\n    }\r\n    // quotes closing\r\n    if (ioq === textFields[i].value.length - 1) {\r\n      textFieldsJoined[j].value =\r\n        textFieldsJoined[j].value + ' ' + textFields[i].value.slice(0, -1);\r\n      textFieldsJoined[j].value = textFieldsJoined[j].value.slice(1); // remove leading whitespace\r\n      if (textFields[i].error) {\r\n        textFieldsJoined[j].error = true;\r\n      }\r\n      j++;\r\n      quotesAreOpened = false;\r\n      continue;\r\n    }\r\n    // quotes opened\r\n    if (ioq === -1 && quotesAreOpened) {\r\n      textFieldsJoined[j].value = textFieldsJoined[j].value + ' ' + textFields[i].value;\r\n      continue;\r\n    }\r\n    // if not wrapped - change first char to uppercase, other - to lowercase\r\n    if (ioq === -1) {\r\n      if (!textFields[i].error) {\r\n        textFields[i].value =\r\n          textFields[i].value[0].toUpperCase() + textFields[i].value.slice(1).toLowerCase();\r\n      }\r\n      textFieldsJoined[j].value = textFields[i].value;\r\n      textFieldsJoined[j].error = textFields[i].error;\r\n      j++;\r\n    }\r\n  }\r\n\r\n  let newState = { familyName: {}, firstName: {}, fathersName: {} };\r\n\r\n  // textFieldsJoined[0]: familyName\r\n  if (textFieldsJoined[0] === undefined) {\r\n    newState.familyName.value = '';\r\n    newState.familyName.error = false;\r\n  } else {\r\n    if (textFieldsJoined[0].error) {\r\n      newState.familyName.value = '';\r\n      newState.familyName.error = true;\r\n    } else {\r\n      newState.familyName.value = textFieldsJoined[0].value;\r\n      newState.familyName.error = false;\r\n    }\r\n  }\r\n\r\n  // textFieldsJoined[1]: firstName\r\n  if (textFieldsJoined[1] === undefined) {\r\n    newState.firstName.value = '';\r\n    newState.firstName.error = false;\r\n  } else {\r\n    if (textFieldsJoined[1].error) {\r\n      newState.firstName.value = '';\r\n      newState.firstName.error = true;\r\n    } else {\r\n      newState.firstName.value = textFieldsJoined[1].value;\r\n      newState.firstName.error = false;\r\n    }\r\n  }\r\n\r\n  // textFieldsJoined[2]: fathersName\r\n  if (textFieldsJoined[2] === undefined) {\r\n    newState.fathersName.value = '';\r\n    newState.fathersName.error = false;\r\n  } else {\r\n    if (textFieldsJoined[2].error) {\r\n      newState.fathersName.value = '';\r\n      newState.fathersName.error = true;\r\n    } else {\r\n      newState.fathersName.value = textFieldsJoined[2].value;\r\n      newState.fathersName.error = false;\r\n    }\r\n  }\r\n\r\n  // sexField - officialSex\r\n  if (sexField) {\r\n    newState.officialSex = sexField;\r\n  } else {\r\n    newState.officialSex = '';\r\n  }\r\n\r\n  // dateOfBirthField - dateOfBirth\r\n  if (dateOfBirthField) {\r\n    newState.dateOfBirth = dateOfBirthField;\r\n  } else {\r\n    newState.dateOfBirth = '';\r\n  }\r\n\r\n  // allowNewPat - is there enough info for create new patient?\r\n  if (\r\n    newState.familyName.value !== '' &&\r\n    !newState.familyName.error &&\r\n    newState.firstName.value !== '' &&\r\n    !newState.firstName.error &&\r\n    !newState.fathersName.error &&\r\n    newState.officialSex !== '' &&\r\n    newState.dateOfBirth !== ''\r\n  ) {\r\n    newState.allowNewPat = 1;\r\n  } else {\r\n    newState.allowNewPat = 0;\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nexport default parseSearchLine;\r\n","import React from 'react';\r\n\r\n// props label, error, value,\r\nexport default function PatientProp(props) {\r\n  let style = {};\r\n  if (props.error) {\r\n    style = { color: 'red' };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span style={style}>{props.label}: </span>\r\n      <strong>{props.value} </strong>\r\n    </>\r\n  );\r\n}\r\n","/**\r\n * Constructor for object \"Patient\", that contains all info about given patient\r\n * @constructor\r\n * @param {Object} patData - object with patient's data, as comes from API\r\n * @apram {string} locale - 2-letter code of locale\r\n * @param [atTime] - the moment on which info should be actual according to updates' history; can be a Date object, timestamp number or dateString\r\n */\r\nexport default function Patient(patData, locale, atTime = Date.now()) {\r\n  // define regular properties comes from patData\r\n  const propList = [\r\n    'familyName',\r\n    'firstName',\r\n    'fathersName',\r\n    'dateOfBirth',\r\n    'officialSex',\r\n    'biologicalSex',\r\n    'address',\r\n    'phoneNumber',\r\n    'lastUpdate',\r\n  ];\r\n  propList.forEach(propName => {\r\n    if (patData[propName]) {\r\n      this[propName] = patData[propName];\r\n    } else {\r\n      this[propName] = '';\r\n    }\r\n  });\r\n\r\n  // only if patData.updates is presented\r\n  if (patData.updates) {\r\n    // atTime also can be a Date object or a dateString, if so convert it to timestamp format\r\n    if (atTime.getTime) {\r\n      atTime = atTime.getTime();\r\n    } else if (isNaN(atTime)) {\r\n      atTime = Date.parse(atTime);\r\n    }\r\n\r\n    // build the patient's updates history timeline\r\n    //console.log(patData.updates)\r\n    let i = patData.updates.length - 1;\r\n    let iTime = Infinity;\r\n    const histProp = key => {\r\n      this[key] = patData.updates[i].update[key];\r\n    };\r\n    while (iTime > atTime && i > -1) {\r\n      // get time of update\r\n      iTime = getUpdateDate(patData.updates[i].dateDeJure, patData.updates[i].dateDeFacto);\r\n      if (atTime > iTime) break;\r\n\r\n      Object.keys(patData.updates[i].update).forEach(histProp);\r\n      i--;\r\n    }\r\n  }\r\n\r\n  // method at(atTime) returns object same as this (Patient) object with data actual at a 'atTime' time\r\n  // according to updates' history. So, it provides chainable interface\r\n  this.at = atTime => new Patient(patData, locale, atTime);\r\n\r\n  // history contains array:\r\n  // [{pat: Patient object with info actual at update time, date: Update date as timestamp (deJure, if absent - deFacto)}, {...}, ...]\r\n  if (patData.updates) {\r\n    Object.defineProperty(this, 'history', {\r\n      get: () => {\r\n        let history = [];\r\n        patData.updates.forEach(updateData => {\r\n          let upd = {};\r\n          upd.date = getUpdateDate(updateData.dateDeJure, updateData.dateDeFacto);\r\n          upd.pat = this.at(upd.date);\r\n          history.push(upd);\r\n        });\r\n        return history;\r\n      },\r\n    });\r\n  }\r\n\r\n  // age at the given time (argument - timestamp)\r\n  this.calcAge = momentTime => {\r\n    const birth = new Date(this.dateOfBirth);\r\n    const moment = new Date(momentTime);\r\n\r\n    let age = moment.getFullYear() - birth.getFullYear(); // only *after* birthday\r\n    if (moment.getMonth() > birth.getMonth()) {\r\n      return age;\r\n    } else if (moment.getMonth() < birth.getMonth()) {\r\n      return age - 1;\r\n    }\r\n    // if birthMONTH is now we need to compare day's numbers\r\n    if (moment.getDate() >= birth.getDate()) {\r\n      return age;\r\n    } else {\r\n      return age - 1;\r\n    }\r\n  };\r\n\r\n  // age at current moment\r\n  Object.defineProperty(this, 'actualAge', {\r\n    get: () => this.calcAge(new Date()),\r\n  });\r\n\r\n  // dateOfBirth toLocaleDateString\r\n  Object.defineProperty(this, 'birthday', {\r\n    get: () => new Date(this.dateOfBirth).toLocaleDateString(),\r\n  });\r\n\r\n  // define locale-dependent props\r\n  switch (locale) {\r\n    default:\r\n    case 'ru':\r\n      this.fullName = `${this.familyName} ${this.firstName} ${this.fathersName}`;\r\n      this.sex = this.officialSex === 'female' ? 'жен.' : 'муж.';\r\n      break;\r\n    case 'en':\r\n      this.fullName = `${this.firstName} ${this.familyName}`;\r\n      this.sex = this.officialSex;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction getUpdateDate(dateDeJure, dateDeFacto) {\r\n  if (dateDeJure) {\r\n    return Date.parse(dateDeJure);\r\n  }\r\n  return Date.parse(dateDeFacto);\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Patient from '../PatientPage/PatientObject';\r\n\r\nexport default function PatientsTable(props) {\r\n  const patsRows = props.patsList.map(patient => {\r\n    const pat = new Patient(patient, 'ru'); // MUST access to locale after implementing locale management subsystem\r\n    return (\r\n      <tr key={patient._id} className=\"f\">\r\n        <td className=\"tb\">{pat.fullName}</td>\r\n        <td className=\"tb\">{pat.sex}</td>\r\n        <td className=\"tb\">\r\n          {pat.calcAge(pat.lastUpdate)}\r\n        </td>\r\n        <td className=\"tb\">{new Date(patient.lastUpdate).toLocaleDateString()}</td>\r\n        <td className=\"tb\">\r\n          <Link to={`/patient/${patient._id}`}>view</Link>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" id=\"patstab\" width=\"700px\">\r\n      <tbody>\r\n        <tr>\r\n          <td className=\"tablehead\">имя</td>\r\n          <td className=\"tablehead\">пол</td>\r\n          <td className=\"tablehead\">возраст</td>\r\n          <td className=\"tablehead\">посл. запись</td>\r\n          <td className=\"tablehead\" />\r\n        </tr>\r\n        <tr>\r\n          <td colSpan=\"4\">\r\n            <hr size=\"1\" width=\"60%\" align=\"center\" />\r\n          </td>\r\n        </tr>\r\n        {patsRows}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","export default function patientsGET(newState) {\r\n  const rawQuery = {\r\n    familyName: newState.familyName.value,\r\n    firstName: newState.firstName.value,\r\n    fathersName: newState.fathersName.value,\r\n  };\r\n  const query = Object.keys(rawQuery)\r\n    .filter(k => rawQuery[k])\r\n    .map(k => k + '=' + encodeURIComponent(rawQuery[k]))\r\n    .join('&');\r\n  return fetch('/patients/?' + query)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error('API request error');\r\n      }\r\n    })\r\n    .then(data => data.list)\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n","import React from 'react';\r\n\r\nexport default function SubmitButton({ allow, text }) {\r\n  // allow: 0 - disabled, 1 - enabled, 2 - sending (disabled)\r\n  let disabled = true;\r\n  //let text = 'New patient';\r\n\r\n  if (allow === 1) {\r\n    disabled = false;\r\n  }\r\n\r\n  if (allow === 2) {\r\n    text = 'Sending...';\r\n  }\r\n\r\n  return (\r\n    <button type=\"submit\" name=\"submitButton\" disabled={disabled}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","export default async function patientPOST(state) {\r\n  const body = {\r\n    familyName: state.familyName.value,\r\n    firstName: state.firstName.value,\r\n    dateOfBirth: state.dateOfBirth,\r\n    officialSex: state.officialSex,\r\n  };\r\n  if (state.fathersName.value !== '') {\r\n    body.fathersName = state.fathersName.value;\r\n  }\r\n\r\n  const reqHeaders = new Headers({ 'Content-Type': 'application/json; charset=UTF-8' });\r\n\r\n  const result = await fetch('/patient/', {\r\n    method: 'POST',\r\n    body: JSON.stringify(body),\r\n    headers: reqHeaders,\r\n  })\r\n    .then(response => response.json())\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n\r\n  return result;\r\n}\r\n","import React, { Component } from 'react';\r\nimport parseSearchLine from './parseSearchLine';\r\nimport PatientProp from './PatientProp';\r\nimport PatientsTable from './PatientsTable';\r\nimport patientsGET from './patientsGET';\r\nimport SubmitButton from '../common/SubmitButton';\r\nimport patientPOST from './patientPOST';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class SearchPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      familyName: { value: 0, error: false }, // 0 but not '' for initial filling of pats' table, see handleSearchType() method\r\n      firstName: { value: '', error: false },\r\n      fathersName: { value: '', error: false },\r\n      officialSex: '',\r\n      dateOfBirth: '',\r\n      patsList: [],\r\n      errorMessage: '',\r\n      reqTimer: false,\r\n      allowNewPat: 0, // if we have enouth info for create new patient, switch to 1; pending - 2\r\n      redirect: false,\r\n    };\r\n\r\n    this.handleSearchType = this.handleSearchType.bind(this);\r\n    this.requestPatsList = this.requestPatsList.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // fill the patients table immidiately after loading page, before typing anything in search field\r\n    this.handleSearchType({ target: { value: '' } });\r\n  }\r\n\r\n  handleSearchType(event) {\r\n    const newState = parseSearchLine(event.target.value);\r\n    // compare old and new 'Names', if equal - deny request to API\r\n    if (\r\n      this.state.familyName.value !== newState.familyName.value ||\r\n      this.state.firstName.value !== newState.firstName.value ||\r\n      this.state.fathersName.value !== newState.fathersName.value\r\n    ) {\r\n      if (!newState.familyName.error && !newState.firstName.error) {\r\n        // use setTimeout to avoid excess API reqiests at every type\r\n        if (this.state.reqTimer) {\r\n          clearTimeout(this.state.reqTimer);\r\n        }\r\n        newState.reqTimer = setTimeout(this.requestPatsList(newState), 300);\r\n      }\r\n    }\r\n    this.setState(newState);\r\n  }\r\n\r\n  requestPatsList(newState) {\r\n    const fetchReq = async () => {\r\n      try {\r\n        newState.patsList = await patientsGET(newState);\r\n        newState.errorMessage = '';\r\n      } catch (error) {\r\n        newState.patsList = [];\r\n        newState.errorMessage = error.message;\r\n      } finally {\r\n        newState.reqTimer = false;\r\n        this.setState(newState);\r\n      }\r\n    };\r\n    return fetchReq; // returns function for use as a callback in setTimeout\r\n  }\r\n\r\n  async handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    let newState = {};\r\n\r\n    if (this.state.allowNewPat !== 1) return; // maybe it's be useful to show some error message in this case, but not now\r\n\r\n    this.setState({ allowNewPat: 2 }); // set submit button view to 'pending'\r\n    try {\r\n      const newPat = await patientPOST(this.state);\r\n      newState.redirect = '/patient/' + newPat._id;\r\n    } catch (error) {\r\n      newState.errorMessage = error.message;\r\n    } finally {\r\n      newState.allowNewPat = 1; // set submit button view again to 'allowed'\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={this.state.redirect} />;\r\n    }\r\n    let bDateStr = new Date(this.state.dateOfBirth).toLocaleDateString();\r\n    if (bDateStr === 'Invalid Date') bDateStr = '';\r\n    return (\r\n      <form name=\"searchForm\" onSubmit={this.handleFormSubmit}>\r\n        <p className=\"cathead\">Search:</p>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"searchField\"\r\n          id=\"searchField\"\r\n          size=\"100\"\r\n          className=\"seachfield\"\r\n          onKeyUp={this.handleSearchType}\r\n        />\r\n        &nbsp;\r\n        <SubmitButton allow={this.state.allowNewPat} text=\"New patient\" />\r\n        <p className=\"patProps\">\r\n          <PatientProp\r\n            label=\"Ф\"\r\n            error={this.state.familyName.error}\r\n            value={this.state.familyName.value}\r\n          />\r\n          <PatientProp\r\n            label=\"И\"\r\n            error={this.state.firstName.error}\r\n            value={this.state.firstName.value}\r\n          />\r\n          <PatientProp\r\n            label=\"О\"\r\n            error={this.state.fathersName.error}\r\n            value={this.state.fathersName.value}\r\n          />\r\n          <PatientProp label=\"пол\" value={this.state.officialSex} />\r\n          <PatientProp label=\"Дата рожд.\" value={bDateStr} />\r\n        </p>\r\n        <p style={{ color: 'red' }}>{this.state.errorMessage}</p>\r\n        <PatientsTable patsList={this.state.patsList} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","export default async function patientPUT(inForm, patId) {\r\n  const reqHeaders = new Headers({ 'Content-Type': 'application/json; charset=UTF-8' });\r\n\r\n  const result = await fetch('/patient/' + patId, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(inForm),\r\n    headers: reqHeaders,\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error('API request error');\r\n      }\r\n    })\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n\r\n  return result;\r\n}\r\n","export default async function patientDELETE(patId) {\r\n  const result = await fetch('/patient/' + patId, {\r\n    method: 'DELETE',\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return;\r\n      } else {\r\n        throw new Error('API request error');\r\n      }\r\n    })\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n\r\n  return result;\r\n}\r\n","import React from 'react';\r\n\r\nexport default function PatPropInput({ label, name, value = '', size = 15, handler, errors }) {\r\n  const style = errors[name] ? { backgroundColor: '#ffb3b3' } : {};\r\n  return (\r\n    <label>\r\n      {label}:{' '}\r\n      <input\r\n        type=\"text\"\r\n        name={name}\r\n        style={style}\r\n        defaultValue={value}\r\n        size={size}\r\n        onChange={handler}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function PatPropRadioset({ list, label, value, name, handler }) {\r\n  let listRadios = list.map(radio => {\r\n    return (\r\n      <label key={radio.value}>\r\n        <input\r\n          type=\"radio\"\r\n          name={name}\r\n          value={radio.value}\r\n          defaultChecked={radio.value === value}\r\n          onChange={handler}\r\n        />{' '}\r\n        {radio.label}\r\n      </label>\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      {label}: {listRadios}\r\n    </>\r\n  );\r\n}\r\n","export default function toEditableDate(dateStr) {\r\n  try {\r\n    const date = new Date(dateStr);\r\n    return date.getDate() + '.' + (date.getMonth() + 1) + '.' + date.getFullYear();\r\n  } catch {\r\n    return 'NOT A DATE';\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PatPropInput from './PatPropInput';\r\nimport PatPropRadioset from './PatPropRadioset';\r\nimport toEditableDate from './toEditableDate';\r\nimport SubmitButton from '../common/SubmitButton';\r\n\r\nexport default function PatPropsForm({\r\n  patData,\r\n  handlerChange,\r\n  errors,\r\n  allow,\r\n  messages,\r\n  handlerSumbit,\r\n  handlerDelete,\r\n}) {\r\n  const radioset = [{ label: 'жен.', value: 'female' }, { label: 'муж.', value: 'male' }];\r\n\r\n  return (\r\n    <form name=\"patPropsForm\" onSubmit={handlerSumbit}>\r\n      <p className=\"tb\">\r\n        <PatPropInput\r\n          label=\"Фамилия\"\r\n          name=\"familyName\"\r\n          value={patData.familyName}\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        &nbsp;\r\n        <PatPropInput\r\n          label=\"Имя\"\r\n          name=\"firstName\"\r\n          value={patData.firstName}\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        &nbsp;\r\n        <PatPropInput\r\n          label=\"Отчество\"\r\n          name=\"fathersName\"\r\n          value={patData.fathersName}\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        <br />\r\n        <PatPropInput\r\n          label=\"Дата рождения\"\r\n          name=\"dateOfBirth\"\r\n          value={toEditableDate(patData.dateOfBirth)}\r\n          size=\"10\"\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        <PatPropRadioset\r\n          list={radioset}\r\n          label=\"Пол (официальный)\"\r\n          name=\"officialSex\"\r\n          value={patData.officialSex}\r\n          handler={handlerChange}\r\n        />\r\n        <br />\r\n        <PatPropInput\r\n          label=\"Биологический пол\"\r\n          name=\"biologicalSex\"\r\n          value={patData.biologicalSex}\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        <br />\r\n        <PatPropInput\r\n          label=\"Адрес\"\r\n          name=\"address\"\r\n          value={patData.address}\r\n          size=\"50\"\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        &nbsp;\r\n        <PatPropInput\r\n          label=\"Телефон\"\r\n          name=\"phoneNumber\"\r\n          value={patData.phoneNumber}\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        <br />\r\n        <PatPropInput\r\n          label=\"Причина изменений\"\r\n          name=\"updateReason\"\r\n          size=\"60\"\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        <br />\r\n        <PatPropInput\r\n          label=\"Дата изменения (юридически)\"\r\n          name=\"updateDateDeJure\"\r\n          size=\"10\"\r\n          handler={handlerChange}\r\n          errors={errors}\r\n        />\r\n        <br />\r\n        <SubmitButton text=\"Send\" allow={allow} />\r\n        <button\r\n          name=\"delete\"\r\n          style={{ backgroundColor: '#ffb3b3', float: 'right' }}\r\n          onClick={handlerDelete}\r\n        >\r\n          DELETE PATIENT\r\n        </button>\r\n      </p>\r\n      {messages.map(m => (\r\n        <p className=\"tb\" style={{ color: m.color }} key={m.id}>\r\n          {m.text}\r\n        </p>\r\n      ))}\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function PatPropsFormShowButton(props) {\r\n  const text = props.patPropsFormShow ? 'Hide' : 'Edit patient data';\r\n  return (\r\n    <button name=\"formShow\" onClick={props.onClick} disabled={props.diff}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","import parseCustomDate from '../common/parseCustomDate';\r\n\r\nexport default function checkPatPropsForm(patData) {\r\n  const propsList = {\r\n    familyName: /^[a-zA-Zа-яА-ЯёЁ0-9 '-{0,150}]+$/,\r\n    firstName: /^[a-zA-Zа-яА-ЯёЁ0-9 '-{0,150}]+$/,\r\n    fathersName: /^[a-zA-Zа-яА-ЯёЁ0-9 '-{,150}]+$/,\r\n    dateOfBirth: false,\r\n    officialSex: /^[male|female]+$/,\r\n    biologicalSex: /^[a-zA-Zа-яА-ЯёЁ0-9{0,30}]+$/,\r\n    address: /^[a-zA-Zа-яА-ЯёЁ0-9 '-.,()/{0,250}]+$/,\r\n    phoneNumber: /^[0-9()+-{0,25}]+$/,\r\n    updateReason: /^[a-zA-Zа-яА-ЯёЁ0-9 '-.,{0,500}]+$/,\r\n    updateDateDeJure: false,\r\n  };\r\n\r\n  // access the form data and convert it to object\r\n  const form = document.getElementsByName('patPropsForm')[0];\r\n  let formValues = {};\r\n  for (let i = 0; i < form.length; i++) {\r\n    if (form[i].type === 'text') {\r\n      formValues[form[i].name] = form[i].value;\r\n    }\r\n    if (form[i].type === 'radio' && form[i].checked === true) {\r\n      formValues[form[i].name] = form[i].value;\r\n    }\r\n  }\r\n\r\n  // check\r\n  let inForm = {}; // values that filled in form; dates are converted to ISOstring format\r\n  let errors = {}; // {fieldName: true} if there is an error in form field\r\n  let diff = false; // true if there is a difference between state.patData and that filled in form\r\n\r\n  // check text and radio fields\r\n  Object.keys(propsList).forEach(key => {\r\n    if (!propsList[key]) return;\r\n    inForm[key] = formValues[key];\r\n    errors[key] = false;\r\n    if (formValues[key].search(propsList[key]) === -1 && formValues[key] !== '') {\r\n      errors[key] = true;\r\n    }\r\n  });\r\n\r\n  // check dates fields\r\n  let dateFields = ['dateOfBirth'];\r\n  if (formValues.updateDateDeJure === '') {\r\n    // updateDateDeJure can be empty\r\n    inForm.updateDateDeJure = '';\r\n    errors.updateDateDeJure = false;\r\n  } else {\r\n    dateFields.push('updateDateDeJure');\r\n  }\r\n  dateFields.forEach(fieldName => {\r\n    const fieldValue = parseCustomDate(formValues[fieldName]);\r\n    if (fieldValue) {\r\n      inForm[fieldName] = fieldValue; // put converted date to inForm\r\n      errors[fieldName] = false;\r\n    } else {\r\n      inForm[fieldName] = formValues[fieldName]; // put erroneous value that was in field at check moment\r\n      errors[fieldName] = true;\r\n    }\r\n  });\r\n\r\n  // calculate diff\r\n  Object.keys(propsList).forEach(key => {\r\n    if (patData[key] !== undefined && patData[key] !== inForm[key]) {\r\n      diff = true;\r\n    } else if (patData[key] === undefined && inForm[key] !== '') {\r\n      diff = true;\r\n    }\r\n  });\r\n\r\n  return { inForm: inForm, errors: errors, diff: diff };\r\n}\r\n","import React, { Component } from 'react';\r\nimport patientGET from './patientGET';\r\nimport patientPUT from './patientPUT';\r\nimport patientDELETE from './patientDELETE';\r\nimport Patient from './PatientObject';\r\nimport PatPropsForm from './PatPropsForm';\r\nimport PatPropsFormShowButton from './PatPropsFormShowButton';\r\nimport checkPatPropsForm from './checkPatPropsForm';\r\n\r\nexport default class PatientPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      queriedId: props.match.params._id, // initially received from router patient ID\r\n      patData: {}, // patient data received from API\r\n      error: '', // master error message\r\n      formErrors: {}, // if there is an error in patPropsForm field, then [fieldName] = true\r\n      formDiff: false, // true if data filled in patPropsForm is different than in state.patData\r\n      formMessages: [], // messages for update or delete errors or success indication, {id, color, text}\r\n      locale: 'ru', // need to rewrite later\r\n      patPropsFormShow: false,\r\n      patUpdateAllow: 0,\r\n    };\r\n\r\n    this.handlePatPropsFormShowHide = this.handlePatPropsFormShowHide.bind(this);\r\n    this.handlePatPropsFormChange = this.handlePatPropsFormChange.bind(this);\r\n    this.handlePatUpdateSubmit = this.handlePatUpdateSubmit.bind(this);\r\n    this.handlePatDelete = this.handlePatDelete.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // load the patient's data from API\r\n    let patData = {};\r\n    let errorMessage = '';\r\n    try {\r\n      // first check the _id's format: hex, length=24\r\n      if (this.state.queriedId.search(/[0-9a-f]{24}/) === -1) {\r\n        throw new Error('Wrong patient ID format.');\r\n      }\r\n      // fetch patient data from API\r\n      patData = await patientGET(this.state.queriedId);\r\n    } catch (error) {\r\n      errorMessage = error.message;\r\n    } finally {\r\n      this.setState({ patData: patData, error: errorMessage });\r\n    }\r\n  }\r\n\r\n  handlePatPropsFormShowHide() {\r\n    this.setState({ patPropsFormShow: !this.state.patPropsFormShow });\r\n  }\r\n\r\n  handlePatPropsFormChange() {\r\n    const { errors, diff } = checkPatPropsForm(this.state.patData);\r\n    // if at least one error - disable submit button (allow=0 - error, allow=1 - no errors)\r\n    const allow = Object.keys(errors).reduce((allow, key) => {\r\n      if (allow === 0) return 0;\r\n      return errors[key] ? 0 : 1;\r\n    }, 1);\r\n\r\n    this.setState({ formErrors: errors, formDiff: diff, patUpdateAllow: allow });\r\n  }\r\n\r\n  async handlePatUpdateSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const { inForm, errors, diff } = checkPatPropsForm(this.state.patData);\r\n\r\n    // if diff === false - error, we don't need to ping API\r\n    if (!diff) {\r\n      this.showFormMessage('red', 'Error: there is nothing to update.');\r\n      return;\r\n    }\r\n\r\n    // if there is some errors in fields - show error\r\n    const errsArray = Object.keys(errors).filter(key => errors[key]);\r\n    if (errsArray.length > 0) {\r\n      this.showFormMessage('red', `Erroneous data entered in form.`);\r\n      return;\r\n    }\r\n\r\n    // check patUpdateAllow\r\n    if (this.state.patUpdateAllow !== 1) {\r\n      this.showFormMessage('red', `Not ready to send.`);\r\n      return;\r\n    }\r\n\r\n    // set submit button view to 'pending'\r\n    this.setState({ patUpdateAllow: 2 });\r\n\r\n    // try to send data to API\r\n    try {\r\n      const updPat = await patientPUT(inForm, this.state.patData._id);\r\n      this.showFormMessage('green', 'Patient info updated successfully.');\r\n      this.setState({ patData: updPat });\r\n    } catch (error) {\r\n      this.showFormMessage('red', error.message);\r\n    } finally {\r\n      this.setState({ patUpdateAllow: 1 });\r\n    }\r\n  }\r\n\r\n  async handlePatDelete(event) {\r\n    event.preventDefault();\r\n    const text = 'If you really want to completely delete this patient, press this button again.';\r\n\r\n    // if del button pressed first time, show warning message and do nothing else\r\n    const messArr = this.state.formMessages.filter(m => m.text === text);\r\n    if (messArr.length === 0) {\r\n      this.showFormMessage('red', text);\r\n      return;\r\n    }\r\n    try {\r\n      await patientDELETE(this.state.patData._id);\r\n      this.showFormMessage('green', 'DELETED SUCCESSFULLY');\r\n    } catch (error) {\r\n      this.showFormMessage('red', error.message);\r\n    }\r\n  }\r\n\r\n  showFormMessage(color, text) {\r\n    const id = String(Date.now()) + Math.round(Math.random() * 10000); // unique id\r\n    const newFormMess = this.state.formMessages.slice();\r\n    newFormMess.push({ id: id, color: color, text: text });\r\n\r\n    // set timeout to close message\r\n    let messOff = id => {\r\n      const newFormMess = this.state.formMessages.slice().filter(m => !(m.id === id));\r\n      this.setState({ formMessages: newFormMess });\r\n    };\r\n    messOff = messOff.bind(this);\r\n    setTimeout(messOff, 5000, id);\r\n    this.setState({ formMessages: newFormMess });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error !== '') {\r\n      return (\r\n        <p className=\"tb\" style={{ color: 'red' }}>\r\n          {this.state.error}\r\n        </p>\r\n      );\r\n    }\r\n\r\n    const pat = new Patient(this.state.patData, this.state.locale);\r\n    let history = [];\r\n    if (pat.history) {\r\n      history = pat.history.map(upd => {\r\n        return (\r\n          <p className=\"tb\" style={{ fontSize: 8 }} key={upd.date}>\r\n            {upd.pat.fullName} ({upd.pat.birthday}) {upd.pat.sex} до{' '}\r\n            {new Date(upd.date).toLocaleDateString()}\r\n          </p>\r\n        );\r\n      });\r\n    }\r\n    //console.log(pat.history);\r\n    return (\r\n      <>\r\n        <p className=\"cathead\">\r\n          {pat.fullName} {pat.actualAge} ({pat.birthday}) {pat.sex}\r\n        </p>\r\n        {history}\r\n        <PatPropsFormShowButton\r\n          patPropsFormShow={this.state.patPropsFormShow}\r\n          onClick={this.handlePatPropsFormShowHide}\r\n          diff={this.state.formDiff}\r\n        />\r\n        {this.state.patPropsFormShow ? (\r\n          <PatPropsForm\r\n            patData={this.state.patData}\r\n            handlerChange={this.handlePatPropsFormChange}\r\n            errors={this.state.formErrors}\r\n            allow={this.state.patUpdateAllow}\r\n            messages={this.state.formMessages}\r\n            handlerSumbit={this.handlePatUpdateSubmit}\r\n            handlerDelete={this.handlePatDelete}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export default function patientGET(_id) {\r\n  return fetch('/patient/' + _id)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error('API request error');\r\n      }\r\n    })\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PatientPage from './PatientPage';\r\n\r\nexport default function PatientPageRouter(props) {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/patient/\" render={props => <Redirect to=\"/\" />} />\r\n      <Route path=\"/patient/:_id\" component={PatientPage} />\r\n    </Switch>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Menu(props) {\r\n  return (\r\n    <>\r\n      <p className=\"menu_h\">Navigation:</p>\r\n      <br />\r\n      <Link to=\"/\">\r\n        <p className=\"menu\">Patients search</p>\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport SearchPage from './SearchPage/';\r\nimport PatientPage from './PatientPage/';\r\nimport Menu from './Menu';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"main\">\r\n          <div className=\"content\">\r\n            <Switch>\r\n              <Route exact path=\"/\" component={SearchPage} />\r\n              <Route path=\"/patient/\" component={PatientPage} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n        <div className=\"menu\">\r\n          <Menu />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
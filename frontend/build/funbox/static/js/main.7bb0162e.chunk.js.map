{"version":3,"sources":["Point.js","PointsList.js","RouteLine.js","GeoMap.js","App.js","serviceWorker.js","index.js"],"names":["Point","SortableElement","_ref","data","handleDeletePoint","react_default","a","createElement","className","style","margin","padding","i","name","onClick","data-i","addr","fontSize","PointsList","SortableContainer","handleAddPoint","onSubmit","type","size","borderRadius","pList","map","pnt","src_Point","key","index","GeoMap","length","lineGeometry","coords","react_yandex_maps_umd_production_min","geometry","options","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","props","defaultState","center","zoom","instanceRef","returnMap","onLoad","returnYmaps","modules","src_PointsList","onSortStart","_","event","preventDefault","onSortEnd","properties","balloonContent","ident","draggable","onDragEnd","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","ymaps","_geocoder","asyncToGenerator","regenerator_default","mark","_callee","uniqId","addrObj","newPList","wrap","_context","prev","next","state","geocode","results","sent","geoObjects","get","getAddressLine","t0","stop","_x","_x2","apply","arguments","_ref2","_callee2","_context2","target","point","value","search","abrupt","getCenter","sha256","Math","round","random","slice","push","_x3","splice","dataset","_ref3","oldIndex","newIndex","removed","_ref4","_callee3","placeMark","_context3","originalEvent","getCoordinates","_x4","GeoMap_GeoMap","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bb0162e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { SortableElement } from 'react-sortable-hoc';\r\n\r\nconst Point = SortableElement(({ data, handleDeletePoint }) => {\r\n  return (\r\n    <div className=\"point\">\r\n      <p style={{ margin: '0px', padding: '0px' }}>\r\n        {data.i + 1}. {data.name}\r\n        <button onClick={handleDeletePoint} data-i={data.i} className=\"del-button\">\r\n          [x]\r\n        </button>\r\n      </p>\r\n      {data.addr ? (\r\n        <p style={{ margin: '0px', padding: '0px', fontSize: '10px' }}>{data.addr}</p>\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Point;\r\n","import React from 'react';\r\nimport { SortableContainer } from 'react-sortable-hoc';\r\n\r\nimport Point from './Point';\r\n\r\nconst PointsList = SortableContainer(({ data, handleAddPoint, handleDeletePoint }) => {\r\n  return (\r\n    <div className=\"pointslist\">\r\n      <form name=\"newPoint\" onSubmit={handleAddPoint}>\r\n        <input type=\"text\" name=\"point\" size=\"30\" style={{ borderRadius: '2px' }} />{' '}\r\n        <button style={{ borderRadius: '2px' }}>New point</button>\r\n      </form>\r\n      {data.pList.map((pnt, i) => {\r\n        pnt.i = i;\r\n        return <Point data={pnt} key={i} index={i} handleDeletePoint={handleDeletePoint} />;\r\n      })}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PointsList;\r\n","import React from 'react';\r\nimport { Polyline } from 'react-yandex-maps';\r\n\r\nexport default function GeoMap({ data }) {\r\n  if (data.pList.length < 2) return null;\r\n\r\n  const lineGeometry = data.pList.map(pnt => pnt.coords);\r\n\r\n  return (\r\n    <Polyline\r\n      geometry={lineGeometry}\r\n      options={{\r\n        balloonCloseButton: false,\r\n        strokeColor: '#000',\r\n        strokeWidth: 3,\r\n        strokeOpacity: 0.7,\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { YMaps, Map, Placemark } from 'react-yandex-maps';\r\n\r\nimport PointsList from './PointsList';\r\nimport RouteLine from './RouteLine';\r\n\r\nexport default function GeoMap(props) {\r\n  return (\r\n    <YMaps>\r\n      <Map\r\n        defaultState={{ center: [56.64, 47.87], zoom: 12 }}\r\n        className=\"ymap-class\"\r\n        instanceRef={props.returnMap}\r\n        onLoad={props.returnYmaps}\r\n        modules={['geocode']}\r\n      >\r\n        <PointsList\r\n          data={props.data}\r\n          handleAddPoint={props.handleAddPoint}\r\n          handleDeletePoint={props.handleDeletePoint}\r\n          onSortStart={(_, event) => event.preventDefault()}\r\n          onSortEnd={props.onSortEnd}\r\n        />\r\n        {props.data.pList.map((pnt, i) => {\r\n          return (\r\n            <Placemark\r\n              geometry={pnt.coords}\r\n              properties={{ balloonContent: pnt.name, ident: i }}\r\n              options={{ draggable: true }}\r\n              onDragEnd={props.onDragEnd}\r\n              modules={['geoObject.addon.balloon']}\r\n              key={i}\r\n            />\r\n          );\r\n        })}\r\n        <RouteLine data={props.data} />\r\n      </Map>\r\n    </YMaps>\r\n  );\r\n}\r\n// onSortStart is for turn off selection of the text under the moving pressed mouse when drag-n-drop points in list\r\n","import React, { Component } from 'react';\r\nimport GeoMap from './GeoMap';\r\n\r\nimport sha256 from 'js-sha256';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pList: [], // points list, { name,  coords: [lat, lon], uniqId, addr}\r\n    };\r\n  }\r\n\r\n  returnMap = map => {\r\n    // put map instanse to state for access to it's methods\r\n    this.setState({ map });\r\n  };\r\n\r\n  returnYmaps = ymaps => {\r\n    // put ymaps object to state for straight access to it's methods\r\n    this.setState({ ymaps });\r\n  };\r\n\r\n  _geocoder = async (uniqId, coords) => {\r\n    try {\r\n      // obtain an address by geocoder\r\n      const addrObj = await this.state.ymaps.geocode(coords, { results: 1 });\r\n      const addr = addrObj.geoObjects.get(0).getAddressLine();\r\n\r\n      // insert the address into pList, if this point wasn't deleted while geocoder works\r\n      const newPList = this.state.pList.map(pnt => {\r\n        if (pnt.uniqId === uniqId) {\r\n          pnt.addr = addr;\r\n        }\r\n        return pnt;\r\n      });\r\n      this.setState({ pList: newPList });\r\n    } catch (e) {\r\n      // ideally there should be an action for logging and monitoring errors\r\n      // but now we simply do nothing and don't show the address\r\n    }\r\n  };\r\n\r\n  handleAddPoint = async event => {\r\n    event.preventDefault();\r\n\r\n    // check the name\r\n    let name = event.target.point.value;\r\n    if (name.search(/^[a-zA-Zа-яА-ЯёЁ0-9 '-_]+$/) === -1) return;\r\n\r\n    // obtain coordinates of the center of the map\r\n    const coords = this.state.map.getCenter();\r\n\r\n    // generate a unique id of point\r\n    const uniqId = sha256(name + Math.round(Math.random() * 100000));\r\n\r\n    // add new point\r\n    let newPList = this.state.pList.slice();\r\n    newPList.push({ name: name, coords: coords, uniqId: uniqId });\r\n    this.setState({ pList: newPList });\r\n\r\n    // asynchronously get an address and put it into state\r\n    await this._geocoder(uniqId, coords);\r\n  };\r\n\r\n  handleDeletePoint = event => {\r\n    let newPList = this.state.pList.slice();\r\n    newPList.splice(event.target.dataset.i, 1);\r\n    this.setState({ pList: newPList });\r\n  };\r\n\r\n  // handle pointslist drag-n-drop\r\n  onSortEnd = ({ oldIndex, newIndex }) => {\r\n    let newPList = this.state.pList.slice();\r\n    const removed = newPList.splice(oldIndex, 1);\r\n    newPList.splice(newIndex, 0, removed[0]);\r\n    this.setState({ pList: newPList });\r\n  };\r\n\r\n  // handle Placemark drag-n-drop\r\n  onDragEnd = async event => {\r\n    const placeMark = event.originalEvent.target;\r\n    const i = placeMark.properties.get('ident');\r\n\r\n    let newPList = this.state.pList.slice();\r\n    newPList[i].coords = placeMark.geometry.getCoordinates(); // get new coords\r\n    this.setState({ pList: newPList });\r\n    // update the address\r\n    await this._geocoder(newPList[i].uniqId, newPList[i].coords);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <GeoMap\r\n        data={this.state}\r\n        handleAddPoint={this.handleAddPoint}\r\n        returnMap={this.returnMap}\r\n        returnYmaps={this.returnYmaps}\r\n        handleDeletePoint={this.handleDeletePoint}\r\n        onSortEnd={this.onSortEnd}\r\n        onDragEnd={this.onDragEnd}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}